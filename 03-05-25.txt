import React, { useState } from 'react';
import { MapContainer, TileLayer, Marker, ScaleControl, useMapEvents, Popup, Tooltip, Polyline } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L, { DivIcon, DragEndEvent, LatLngExpression } from 'leaflet';

function Toolbar({ onAddBox, onAddCable, cableMode }: { onAddBox: () => void, onAddCable: () => void, cableMode: boolean }) {
  return (
    <div style={{ position: "absolute", top: 10, left: 10, zIndex: 1000, background: "#fff", padding: 10, borderRadius: 8, boxShadow: "0 2px 8px rgba(0,0,0,0.15)" }}>
      <button onClick={onAddBox}>Добавить бокс</button>
      <button onClick={onAddCable} style={{ background: cableMode ? '#e0e0e0' : undefined, marginLeft: 8 }}>Добавить кабель</button>
    </div>
  );
}

function AddBoxOnMap({ onMapClick, enabled }: { onMapClick: (pos: [number, number]) => void, enabled: boolean }) {
  useMapEvents({
    click(e: any) {
      if (enabled) {
        onMapClick([e.latlng.lat, e.latlng.lng]);
      }
    }
  });
  return null;
}

function AddCableOnMap({ onMapClick, enabled }: { onMapClick: (pos: [number, number]) => void, enabled: boolean }) {
  useMapEvents({
    click(e: any) {
      if (enabled) {
        onMapClick([e.latlng.lat, e.latlng.lng]);
      }
    }
  });
  return null;
}

function getBoxIcon(number: string) {
  return new DivIcon({
    className: '',
    iconSize: [40, 40],
    iconAnchor: [20, 20],
    html: `
      <svg width="40" height="40" xmlns="http://www.w3.org/2000/svg">
        <rect x="5" y="5" width="30" height="30" rx="4" fill="blue" fill-opacity="0.7" stroke="black" stroke-width="2" />
        <text x="20" y="25" font-size="14" text-anchor="middle" fill="white">${number}</text>
      </svg>
    `
  });
}

function getAttachmentPointIcon(selected: boolean, hovered: boolean) {
  return new DivIcon({
    className: '',
    iconSize: [8, 8],
    iconAnchor: [4, 4],
    html: `
      <svg width="8" height="8" xmlns="http://www.w3.org/2000/svg">
        <circle cx="4" cy="4" r="3" fill="${hovered ? 'red' : selected ? 'orange' : 'yellow'}" stroke="black" stroke-width="1" />
      </svg>
    `
  });
}

function getCablePointIcon(selected: boolean) {
  return new DivIcon({
    className: '',
    iconSize: [12, 12],
    iconAnchor: [6, 6],
    html: `
      <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
        <circle cx="6" cy="6" r="5" fill="${selected ? 'orange' : 'white'}" stroke="green" stroke-width="2" />
      </svg>
    `
  });
}

const ATTACHMENT_OFFSET = 0.00009;

interface Cable {
  id: number;
  points: [number, number][];
  from: { boxId: number, attachmentId: string };
  to: { boxId: number, attachmentId: string } | null;
  fiberCount: number; // количество волокон
  layingType: 'подвес' | 'канализация'; // тип прокладки
}

function calculateCableLength(points: [number, number][]): number {
  let length = 0;
  for (let i = 1; i < points.length; i++) {
    const from = L.latLng(points[i - 1][0], points[i - 1][1]);
    const to = L.latLng(points[i][0], points[i][1]);
    length += from.distanceTo(to);
  }
  return length;
}

// Геометрическая середина по длине линии
function getPolylineMiddlePoint(points: [number, number][]): [number, number] {
  if (points.length === 0) return [0, 0];
  if (points.length === 1) return points[0];
  const total = calculateCableLength(points);
  let acc = 0;
  for (let i = 1; i < points.length; i++) {
    const from = L.latLng(points[i - 1][0], points[i - 1][1]);
    const to = L.latLng(points[i][0], points[i][1]);
    const seg = from.distanceTo(to);
    if (acc + seg >= total / 2) {
      const ratio = (total / 2 - acc) / seg;
      return [
        from.lat + (to.lat - from.lat) * ratio,
        from.lng + (to.lng - from.lng) * ratio
      ];
    }
    acc += seg;
  }
  return points[Math.floor(points.length / 2)];
}

// Цветовая схема Одесскабель (по номерам)
const ODESA_COLORS = [
  { name: 'червоний', color: '#ff0000' },
  { name: 'зелений', color: '#00b050' },
  { name: 'синій', color: '#0070c0' },
  { name: 'жовтий', color: '#ffff00' },
  { name: 'білий', color: '#ffffff', border: '#bbb' },
  { name: 'сірий', color: '#b7b7b7' },
  { name: 'коричневий', color: '#703000' },
  { name: 'фіолетовий', color: '#7030a0' },
  { name: 'оранжевий', color: '#ff9900' },
  { name: 'чорний', color: '#000000' },
  { name: 'рожевий', color: '#ff99cc' },
  { name: 'бірюзовий', color: '#00ffff' },
];

// Тип для структуры волокна и модуля
type FiberStructure = {
  module: number;
  moduleColor: { name: string; color: string; border?: string };
  fiber: number;
  fiberColor: { name: string; color: string; border?: string };
};

// Функция генерации структуры модулей и волокон
function getCableStructure(fiberCount: number): FiberStructure[] {
  let modules = 1;
  let fibersPerModule = fiberCount;
  if (fiberCount === 24) { modules = 2; fibersPerModule = 12; }
  if (fiberCount === 48) { modules = 4; fibersPerModule = 12; }
  if (fiberCount === 96) { modules = 8; fibersPerModule = 12; }
  if (fiberCount === 144) { modules = 12; fibersPerModule = 12; }
  const structure: FiberStructure[] = [];
  for (let m = 0; m < modules; m++) {
    for (let f = 0; f < fibersPerModule; f++) {
      if (m * fibersPerModule + f >= fiberCount) break;
      structure.push({
        module: m + 1,
        moduleColor: modules === 1 ? ODESA_COLORS[4] : ODESA_COLORS[m % 12], // если один модуль — белый
        fiber: f + 1,
        fiberColor: ODESA_COLORS[f % 12],
      });
    }
  }
  return structure;
}

function App() {
  const [boxes, setBoxes] = useState<Array<{
    id: number;
    position: [number, number];
    number: string;
    splitter: string;
    address: string;
    place: string;
    attachmentPoints: Array<{ id: string; type: 'in' | 'out'; }>;
  }>>([]);
  const [addBoxMode, setAddBoxMode] = useState(false);
  const [addCableMode, setAddCableMode] = useState(false);
  const [newBoxPosition, setNewBoxPosition] = useState<[number, number] | null>(null);
  const [boxParams, setBoxParams] = useState({ number: "", splitter: "", address: "", place: "" });
  const [selectedBox, setSelectedBox] = useState<number | null>(null);
  const [selectedAttachment, setSelectedAttachment] = useState<string | null>(null);
  const [hoveredAttachment, setHoveredAttachment] = useState<string | null>(null);

  const [cableStart, setCableStart] = useState<{ boxId: number, attachmentId: string, position: [number, number] } | null>(null);
  const [cablePoints, setCablePoints] = useState<[number, number][]>([]);
  const [cableEnd, setCableEnd] = useState<{ boxId: number, attachmentId: string, position: [number, number] } | null>(null);
  const [cables, setCables] = useState<Cable[]>([]);
  const [selectedCableId, setSelectedCableId] = useState<number | null>(null);
  const [newCableParams, setNewCableParams] = useState<{ fiberCount: number; layingType: 'подвес' | 'канализация' }>({ fiberCount: 12, layingType: 'подвес' });
  const [showCableParamsModal, setShowCableParamsModal] = useState(false);

  // Исправление отображения стандартного маркера
  delete (L.Icon.Default.prototype as any)._getIconUrl;
  L.Icon.Default.mergeOptions({
    iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
    iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
    shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
  });

  const handleMapClick = (position: [number, number]) => {
    setNewBoxPosition(position);
    setAddBoxMode(false);
  };

  const handleSaveBox = () => {
    if (!newBoxPosition) return;
    setBoxes([
      ...boxes,
      {
        id: Date.now(),
        position: newBoxPosition,
        ...boxParams,
        attachmentPoints: [
          { id: `${Date.now()}-in`, type: 'in' },
          { id: `${Date.now()}-out`, type: 'out' }
        ]
      }
    ]);
    setNewBoxPosition(null);
    setBoxParams({ number: "", splitter: "", address: "", place: "" });
  };

  const handleMarkerDblClick = (boxId: number) => {
    setSelectedBox(boxId);
  };

  const handleCloseDetails = () => {
    setSelectedBox(null);
  };

  const handleMarkerDragEnd = (boxId: number, e: DragEndEvent) => {
    const { lat, lng } = (e.target as L.Marker).getLatLng();
    setBoxes(boxes => boxes.map(box =>
      box.id === boxId ? { ...box, position: [lat, lng] as [number, number] } : box
    ));
    setCables(cables => cables.map(cable => {
      let updated = false;
      const newPoints = [...cable.points];
      if (cable.from.boxId === boxId) {
        const ap = boxes.find(b => b.id === boxId)?.attachmentPoints.find(a => a.id === cable.from.attachmentId);
        if (ap) {
          const offsetLat = 0;
          const offsetLng = ap.type === 'in' ? -ATTACHMENT_OFFSET : ATTACHMENT_OFFSET;
          newPoints[0] = [lat + offsetLat, lng + offsetLng];
          updated = true;
        }
      }
      if (cable.to && cable.to.boxId === boxId) {
        const ap = boxes.find(b => b.id === boxId)?.attachmentPoints.find(a => a.id === cable.to!.attachmentId);
        if (ap) {
          const offsetLat = 0;
          const offsetLng = ap.type === 'in' ? -ATTACHMENT_OFFSET : ATTACHMENT_OFFSET;
          newPoints[newPoints.length - 1] = [lat + offsetLat, lng + offsetLng];
          updated = true;
        }
      }
      return updated ? { ...cable, points: newPoints } : cable;
    }));
  };

  const handleAttachmentClick = (attachmentId: string, boxId: number, position: [number, number]) => {
    console.log('handleAttachmentClick', { addCableMode, cableStart, cableEnd, attachmentId, boxId, position });  
    if (addCableMode) {
      if (!cableStart) {
        setCableStart({ boxId, attachmentId, position });
        setCablePoints([position]);
        setCableEnd(null);
      } else if (!cableEnd && (boxId !== cableStart.boxId || attachmentId !== cableStart.attachmentId)) {
        console.log('Вторая точка выбрана', { boxId, attachmentId, position });
        setCablePoints(points => [...points, position]);
        setCableEnd({ boxId, attachmentId, position });
        setShowCableParamsModal(true);
        setNewCableParams({ fiberCount: 12, layingType: 'подвес' }); // значения по умолчанию
      }
    } else {
      setSelectedAttachment(attachmentId);
    }
  };

  const handleAttachmentMouseOver = (attachmentId: string) => {
    setHoveredAttachment(attachmentId);
  };
  const handleAttachmentMouseOut = () => {
    setHoveredAttachment(null);
  };

  const handleCableMapClick = (pos: [number, number]) => {
    if (addCableMode && cableStart && !cableEnd) {
      setCablePoints(points => [...points, pos]);
    }
  };

  const handleCableClick = (cableId: number) => {
    setSelectedCableId(cableId);
  };

  const handleSaveCableWithParams = () => {
    if (!cableStart || !cableEnd) return;
    setCables(cables => [
      ...cables,
      {
        id: Date.now(),
        points: [...cablePoints, cableEnd.position],
        from: { boxId: cableStart.boxId, attachmentId: cableStart.attachmentId },
        to: { boxId: cableEnd.boxId, attachmentId: cableEnd.attachmentId },
        fiberCount: newCableParams.fiberCount,
        layingType: newCableParams.layingType,
      }
    ]);
    setCableStart(null);
    setCablePoints([]);
    setCableEnd(null);
    setAddCableMode(false);
    setShowCableParamsModal(false);
  };

  // Drag промежуточных точек
  const handleCablePointDragEnd = (cableId: number, pointIdx: number, e: DragEndEvent) => {
    const { lat, lng } = (e.target as L.Marker).getLatLng();
    setCables(cables => cables.map(cable => {
      if (cable.id === cableId) {
        const newPoints = [...cable.points];
        newPoints[pointIdx] = [lat, lng];
        return { ...cable, points: newPoints };
      }
      return cable;
    }));
  }; 

  console.log('cablePoints', cablePoints);

  return (
        <div style={{ height: "100vh", width: "100vw" }}>
      <Toolbar onAddBox={() => setAddBoxMode(true)} onAddCable={() => { setAddCableMode(true); setCableStart(null); setCablePoints([]); setCableEnd(null); }} cableMode={addCableMode} />
      <MapContainer center={[48.3794, 31.1656]} zoom={17} style={{ height: "100%", width: "100%" }}>
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />
        <ScaleControl position="bottomright" />
        <AddBoxOnMap onMapClick={handleMapClick} enabled={addBoxMode} />
        <AddCableOnMap onMapClick={handleCableMapClick} enabled={addCableMode && !!cableStart && !cableEnd} />
        {/* Существующие кабели */}
        {cables.map(cable => (
          <React.Fragment key={cable.id}>
            <Polyline
  positions={cable.points as LatLngExpression[]}
  color={
    cable.fiberCount === 4 ? "#000"
    : cable.fiberCount === 8 ? "#ff0000"
    : cable.fiberCount === 12 ? "#00b050"
    : cable.fiberCount === 24 ? "#0070c0"
    : cable.fiberCount === 48 ? "#ff9900"
    : cable.fiberCount === 96 ? "#703000"
    : cable.fiberCount === 144 ? "#7030a0"
    : "green"
  }
  dashArray={cable.layingType === "канализация" ? "6 6" : undefined}
  weight={4}
  eventHandlers={{ click: () => handleCableClick(cable.id) }}
>
              {/* Длина кабеля по середине */}
              {cable.points.length > 1 && (
                <Tooltip
                  position={getPolylineMiddlePoint(cable.points)}
                  direction="top"
                  offset={[0, -10]}
                  permanent
                  opacity={0.85}
                  interactive={false}
                >
                  <span style={{ fontSize: 13, fontWeight: 600 }}>
                    {calculateCableLength(cable.points).toFixed(1)} м
                  </span>
                </Tooltip>
              )}
            </Polyline>
            {/* Drag-ручки на промежуточных точках (кроме концов) */}
            {selectedCableId === cable.id && cable.points.slice(1, -1).map((pt, idx) => (
              <Marker
                key={idx}
                position={pt}
                icon={getCablePointIcon(false)}
                draggable={true}
                eventHandlers={{
                  dragend: (e) => handleCablePointDragEnd(cable.id, idx + 1, e as DragEndEvent)
                }}
              />
            ))}
          </React.Fragment>
        ))}
        {/* Строящийся кабель */}
        {addCableMode && cableStart && (showCableParamsModal || !cableEnd) && cablePoints.length > 1 && (
          <Polyline positions={cablePoints as LatLngExpression[]} color="orange" dashArray="6 6" weight={4} />
        )}
        {boxes.map((box) => (
          <React.Fragment key={box.id}>
            <Marker
              position={box.position}
              icon={getBoxIcon(box.number)}
              draggable={true}
              eventHandlers={{
                dblclick: () => handleMarkerDblClick(box.id),
                dragend: (e) => handleMarkerDragEnd(box.id, e as DragEndEvent)
              }}
            >
              {/* Координаты под маркером */}
              <Tooltip direction="bottom" offset={[0, 20]} permanent>
                <span style={{ fontSize: 12 }}>
                  {box.position[0].toFixed(6)}, {box.position[1].toFixed(6)}
                </span>
              </Tooltip>
              <Popup>
                <div>
                  <b>Бокс №{box.number}</b><br />
                  Сплиттер: {box.splitter}<br />
                  Адрес: {box.address}<br />
                  Место: {box.place}
                </div>
              </Popup>
            </Marker>
            {box.attachmentPoints.map((ap) => {
              const offsetLat = 0;
              const offsetLng = ap.type === 'in' ? -ATTACHMENT_OFFSET : ATTACHMENT_OFFSET;
              return (
                <Marker
                  key={ap.id}
                  position={[box.position[0] + offsetLat, box.position[1] + offsetLng]}
                  icon={getAttachmentPointIcon(selectedAttachment === ap.id, hoveredAttachment === ap.id)}
                  interactive={true}
                  eventHandlers={{
                    click: () => handleAttachmentClick(ap.id, box.id, [box.position[0] + offsetLat, box.position[1] + offsetLng]),
                    mouseover: () => handleAttachmentMouseOver(ap.id),
                    mouseout: () => handleAttachmentMouseOut()
                  }}
                />
              );
            })}
          </React.Fragment>
        ))}
      </MapContainer>
      {showCableParamsModal && (
  <div style={{
    position: "absolute", top: "35%", left: "50%", transform: "translate(-50%, -35%)",
    background: "#fff", padding: 24, borderRadius: 10, boxShadow: "0 2px 12px rgba(0,0,0,0.3)", zIndex: 4000
  }}>
    <h3>Параметры кабеля</h3>
    <div style={{ marginBottom: 12 }}>
      <label>Волоконность:&nbsp;
        <select
          value={newCableParams.fiberCount}
          onChange={e => setNewCableParams(p => ({ ...p, fiberCount: Number(e.target.value) }))}
        >
          <option value={4}>4</option>
          <option value={8}>8</option>
          <option value={12}>12</option>
          <option value={24}>24</option>
          <option value={48}>48</option>
          <option value={96}>96</option>
          <option value={144}>144</option>
        </select>
      </label>
    </div>
    <div style={{ marginBottom: 12 }}>
      <label>Тип прокладки:&nbsp;
        <select
          value={newCableParams.layingType}
          onChange={e => setNewCableParams(p => ({ ...p, layingType: e.target.value as 'подвес' | 'канализация' }))}
        >
          <option value="подвес">Подвес</option>
          <option value="канализация">Канализация</option>
        </select>
      </label>
    </div>
    <button onClick={handleSaveCableWithParams} style={{ marginRight: 12 }}>Сохранить</button>
    <button onClick={() => setShowCableParamsModal(false)}>Отмена</button>
  </div>
)}
      {/* Информационная панель внизу */}
      <div style={{
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        height: 180,
        background: 'rgba(255,255,255,0.97)',
        borderTop: '1px solid #bbb',
        display: 'flex',
        fontSize: 13,
        zIndex: 2001
      }}>
        {/* Список боксов */}
        <div style={{ flex: 1, borderRight: '1px solid #bbb', padding: '10px 16px', overflowY: 'auto' }}>
          <b>Боксы</b>
          <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: 6 }}>
            <thead>
              <tr style={{ background: '#f0f0f0' }}>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>№</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>Адрес</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>Место</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>Координаты</th>
              </tr>
            </thead>
            <tbody>
              {boxes.map(box => (
                <tr key={box.id}>
                  <td style={{ padding: '2px 4px' }}>{box.number}</td>
                  <td style={{ padding: '2px 4px' }}>{box.address}</td>
                  <td style={{ padding: '2px 4px' }}>{box.place}</td>
                  <td style={{ padding: '2px 4px', fontSize: 11 }}>
                    {box.position[0].toFixed(6)}, {box.position[1].toFixed(6)}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {/* Список кабелей */}
        <div style={{ flex: 1, padding: '10px 16px', overflowY: 'auto' }}>
          <b>Кабели</b>
          <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: 6 }}>
            <thead>
              <tr style={{ background: '#f0f0f0' }}>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>#</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>От</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>До</th>
                <th style={{ textAlign: 'left', padding: '2px 4px' }}>Длина</th>
              </tr>
            </thead>
            <tbody>
              {cables.map((cable, idx) => (
                <tr key={cable.id}>
                  <td style={{ padding: '2px 4px' }}>{idx + 1}</td>
                  <td style={{ padding: '2px 4px' }}>
                    {(() => {
                      const fromBox = boxes.find(b => b.id === cable.from.boxId);
                      const ap = fromBox?.attachmentPoints.find(a => a.id === cable.from.attachmentId);
                      return fromBox ? `Бокс ${fromBox.number} (${ap?.type === 'in' ? 'Вход' : 'Выход'})` : '-';
                    })()}
                  </td>
                  <td style={{ padding: '2px 4px' }}>
                    {(() => {
                      if (!cable.to) return '-';
                      const toBox = boxes.find(b => b.id === cable.to!.boxId);
                      const ap = toBox?.attachmentPoints.find(a => a.id === cable.to!.attachmentId);
                      return toBox ? `Бокс ${toBox.number} (${ap?.type === 'in' ? 'Вход' : 'Выход'})` : '-';
                    })()}
                  </td>
                  <td style={{ padding: '2px 4px' }}>{calculateCableLength(cable.points).toFixed(1)} м</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {newBoxPosition && (
        <div style={{
          position: "absolute", top: "30%", left: "50%", transform: "translate(-50%, -30%)",
          background: "#fff", padding: 20, borderRadius: 8, boxShadow: "0 2px 8px rgba(0,0,0,0.25)", zIndex: 2000
        }}>
          <h3>Параметры бокса</h3>
          <div>
            <label>Номер бокса: <input value={boxParams.number} onChange={e => setBoxParams({ ...boxParams, number: e.target.value })} /></label>
          </div>
          <div>
            <label>Номер сплиттера: <input value={boxParams.splitter} onChange={e => setBoxParams({ ...boxParams, splitter: e.target.value })} /></label>
          </div>
          <div>
            <label>Адрес установки: <input value={boxParams.address} onChange={e => setBoxParams({ ...boxParams, address: e.target.value })} /></label>
          </div>
          <div>
            <label>Место установки: <input value={boxParams.place} onChange={e => setBoxParams({ ...boxParams, place: e.target.value })} /></label>
          </div>
          <button onClick={handleSaveBox}>Сохранить</button>
        </div>
      )}

{/* начало selectedBox */}
{selectedBox !== null && (() => {
  const box = boxes.find(b => b.id === selectedBox);
  if (!box) return null;
  return (
  <div style={{
    position: "absolute",
    top: "20%",
    left: "50%",
    transform: "translate(-50%, -20%)",
    background: "#fff",
    padding: 24,
    borderRadius: 10,
    boxShadow: "0 2px 12px rgba(0,0,0,0.3)",
    zIndex: 3000,
    minWidth: 800,
    // minHeight: 350
    maxHeight: "80vh", // Ограничиваем максимальную высоту окна
    overflow: "hidden", // Скрываем лишнее содержимое
  }}>
    {/* Заголовок — всегда сверху */}
    <h3 style={{
      margin: 0,
      marginBottom: 18,
      fontSize: 24,
      fontWeight: 700,
      letterSpacing: 0.5
    }}>
      Детали бокса №{box.number}
    </h3>
    <button onClick={handleCloseDetails} style={{
    position: 'absolute',
    right: 24,
    top: 16
  }}>Закрыть</button>
  
{/* Контейнер с прокруткой для содержимого */}
<div style={{
  overflowY: "auto",
  maxHeight: "calc(80vh - 70px)", // 70px — примерная высота заголовка и кнопки
}}>

    {(() => {
      const box = boxes.find(b => b.id === selectedBox);
      if (!box) return null;
      // Входящий кабель (ищем тот, у которого box.to.boxId === box.id)
      const incomingCable = cables.find(c => c.to && c.to.boxId === box.id);
      // Исходящие кабели (box.from.boxId === box.id)
      const outgoingCables = cables.filter(c => c.from.boxId === box.id);
      return (
        <div style={{ 
          display: 'flex', 
          flexDirection: 'row',
          gap: 32,
          alignItems: 'flex-start' // КЛЮЧЕВОЕ изменение!
        }}>
{/* Входящие кабели слева начало */}
{/* Левая колонка — входящий кабель */}
<div style={{ flex: 1, minWidth: 200 }}>
  {!incomingCable && (
    <div style={{ color: '#888', fontSize: 13, margin: 'auto' }}>Нет входящего кабеля</div>
  )}
  {incomingCable && (
    <>

{/* Отображение Боксов Кабелей */}    
<div style={{ fontSize: 12, color: '#555', marginBottom: 6 }}>
  {(() => {
    const fromBox = boxes.find(b => b.id === incomingCable.from.boxId);
    const ap = fromBox?.attachmentPoints.find(a => a.id === incomingCable.from.attachmentId);
    return fromBox
      ? `от Бокс №${fromBox.number} (${ap?.type === 'in' ? 'вход' : 'выход'})`
      : '';
  })()}
</div>
<div style={{ fontWeight: 600, fontSize: 14, marginBottom: 2 }}>
  Кабель #{incomingCable.id}
</div>
<div style={{ fontSize: 13, marginBottom: 4 }}>
  ({incomingCable.points.length} точек, {calculateCableLength(incomingCable.points).toFixed(1)} м)
</div>
{/* Отображение Боксов Кабелей */}

      <table style={{ borderCollapse: 'collapse', fontSize: 13, height: '100%' }}>
        <tbody>
          {getCableStructure(incomingCable.fiberCount).map((fiber, idx) => (
            <tr key={idx}>
              <td style={{
                border: '1px solid #222',
                padding: '2px 3px',
                fontStyle: 'italic',
                minWidth: 60,
                whiteSpace: 'nowrap',
                background: fiber.moduleColor.color,
                lineHeight: 1
              }}>
                {fiber.moduleColor.name} ({fiber.module})
              </td>
              <td style={{
                background: fiber.fiberColor.color,
                border: '1px solid #222',
                padding: '2px 3px',
                fontStyle: 'italic',
                minWidth: 90,
                whiteSpace: 'nowrap',
                lineHeight: 1
              }}>
                {fiber.fiberColor.name}
              </td>
              <td style={{
                border: '1px solid #222',
                padding: '2px 3px',
                textAlign: 'center',
                fontStyle: 'italic',
                minWidth: 30,
                whiteSpace: 'nowrap',
                lineHeight: 1
              }}>
                {fiber.fiber}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  )}
</div>
{/* Входящие кабели слева конец */}

{/* Центр — для соединений волокон (пока пусто) */}
<div style={{ flex: 1, minWidth: 120, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    {/* Здесь в будущем будет визуализация соединений */}
    <span style={{ color: '#bbb', fontSize: 13 }}>—</span>
  </div>

{/* Исходящие кабели справа начало */}
{/* Правая колонка — исходящий кабель */}
<div style={{ flex: 1, minWidth: 200 }}>
    {outgoingCables.length === 0 && (
      <div style={{ color: '#888', fontSize: 13, margin: 'auto' }}>Нет исходящих кабелей</div>
    )}

    {/* Отображение Боксов Кабелей */}  
    {outgoingCables.map((cable) => (
      <div key={cable.id} style={{ marginBottom: 18 }}>
  <div style={{ fontSize: 12, color: '#555', marginBottom: 6 }}>
    {(() => {
      const toBox = boxes.find(b => b.id === cable.to?.boxId);
      const ap = toBox?.attachmentPoints.find(a => a.id === cable.to?.attachmentId);
      return toBox
        ? `до Бокс №${toBox.number} (${ap?.type === 'in' ? 'вход' : 'выход'})`
        : '';
    })()}
  </div>
  <div style={{ fontWeight: 600, fontSize: 14, marginBottom: 2 }}>
    Кабель #{cable.id}
  </div>
  <div style={{ fontSize: 13, marginBottom: 4 }}>
    ({cable.points.length} точек, {calculateCableLength(cable.points).toFixed(1)} м)
  </div>
    {/* Отображение Боксов Кабелей */}  

      <table style={{ borderCollapse: 'collapse', fontSize: 13, height: '100%' }}>
        <tbody>
          {getCableStructure(cable.fiberCount).map((fiber, idx) => (
            <tr key={idx}>
              {/* Номер волокна */}
              <td style={{
                border: '1px solid #222',
                padding: '2px 3px',
                textAlign: 'center',
                fontStyle: 'italic',
                minWidth: 30,
                whiteSpace: 'nowrap',
                lineHeight: 1
              }}>
                {fiber.fiber}
              </td>
              {/* Волокно */}
              <td style={{
                background: fiber.fiberColor.color,
                border: '1px solid #222',
                padding: '2px 3px',
                fontStyle: 'italic',
                minWidth: 90,
                whiteSpace: 'nowrap',
                lineHeight: 1
              }}>
                {fiber.fiberColor.name}
              </td>
              {/* Модуль */}
              <td style={{
                border: '1px solid #222',
                padding: '2px 3px',
                fontStyle: 'italic',
                minWidth: 60,
                whiteSpace: 'nowrap',
                background: fiber.moduleColor.color,
                lineHeight: 1
              }}>
                {fiber.moduleColor.name} ({fiber.module})
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  ))}
</div>
{/* Исходящие кабели справа конец */}
        </div>
      );
    })()}
   </div>
   </div>
   );
})()}
{/* конец selectedBox */}
    </div>
  );
}

export default App;         